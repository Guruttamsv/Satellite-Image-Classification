# -*- coding: utf-8 -*-
"""ImageClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12BQRYyqQz9b5pRB--Ga-0xQj0gJ7FxNa
"""

import torch
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

from google.colab import files

uploaded = files.upload()
for fn in uploaded.keys():
  print(f'User uploaded file "{fn}" with length {len(uploaded[fn])} bytes')

  # Save the uploaded file (you can customize this)
  with open(fn, 'wb') as f:
    f.write(uploaded[fn])

!unzip archive.zip

from torchvision import datasets, transforms
data_transforms = transforms.Compose([
    transforms.Resize((224, 224)),  # Resize to consistent dimensions (adjust as needed)
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])  # ImageNet normalization
])

dataset = datasets.ImageFolder(root='data', transform=data_transforms)

# Get class names
class_names = dataset.classes
print(class_names)

# Split into training and testing sets (80/20 split in this example)
train_size = int(0.8 * len(dataset))
test_size = len(dataset) - train_size

from torch.utils.data import random_split  # Import random_split
# Perform the split
train_dataset, test_dataset = random_split(dataset, [train_size, test_size])

print(len(test_dataset))
print(len(train_dataset))

from torch.utils.data import DataLoader

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

print(len(train_loader))
print(len(test_loader))

import torch.nn as nn

class SimpleCNN(nn.Module):
    def __init__(self, num_classes=4):
        super(SimpleCNN, self).__init__()
        self.conv_layers = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2),
            # ... more convolutional layers as needed
        )
        self.fc_layers = nn.Sequential(
            nn.Flatten(),
            nn.Linear(401408, 128),  # Changed to match the flattened shape
            nn.ReLU(),
            nn.Linear(128, num_classes)
        )

    def forward(self, x):
        x = self.conv_layers(x)
        #print("Shape after conv layers:", x.shape)
        x = x.view(x.size(0), -1)  # Flatten
        #print("Shape after flattening:", x.shape)
        x = self.fc_layers(x)
        return x

model = SimpleCNN().to(device)

import torch.optim as optim  # Import the optim module

# Loss Function and Optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training and Evaluation Loops
num_epochs = 10

for epoch in range(num_epochs):
    model.train()  # Set the model to training mode
    train_loss = 0.0

    for i, (images, labels) in enumerate(train_loader):
        images = images.to(device)
        labels = labels.to(device)

        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, labels)

        # Backward pass and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        train_loss += loss.item()  # Accumulate loss for the epoch

        if (i+1) % 100 == 0:
            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{len(train_loader)}], Loss: {loss.item():.4f}')

    # Print average training loss for the epoch
    train_loss /= len(train_loader)
    print(f'Epoch [{epoch+1}/{num_epochs}], Training Loss: {train_loss:.4f}')

# Evaluation
model.eval()  # Set the model to evaluation mode
with torch.no_grad():  # No need to calculate gradients during evaluation
    correct = 0
    total = 0
    for images, labels in train_loader:  # You can use a separate validation loader if you have one
        images = images.to(device)
        labels = labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    print(f'Accuracy on the dataset: {100 * correct / total:.2f}%')